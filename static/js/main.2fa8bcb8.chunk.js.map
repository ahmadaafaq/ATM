{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","money","setMoney","denomination","setDenomination","defaultDenominations","useEffect","result","total","length","i","push","Math","floor","className","type","name","onClick","elem","document","querySelector","value","alert","withdrawMoney","map","notes","index","key","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAuEeA,MApEf,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACNC,EADM,KACCC,EADD,OAE2BF,mBAAS,IAFpC,mBAENG,EAFM,KAEQC,EAFR,KAGPC,EAAuB,CAAC,IAAM,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,EAAG,EAAG,GA6BrE,OAdAC,qBAAU,WACR,IAAIC,EAAS,GACTC,EAAQP,EACZ,GAAIA,EAAQ,GAA6B,IAAxBE,EAAaM,OAAc,CAC1C,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAqBI,OAAQC,IAC3CF,EAAQ,IACVD,EAAOI,KAAKC,KAAKC,MAAML,EAAQH,EAAqBK,KACpDF,GAAgBH,EAAqBK,IAGzCN,EAAgBG,MAEjB,CAACF,EAAsBF,EAAaM,OAAQR,IAG7C,yBAAKa,UAAU,OACb,4BAAQA,UAAU,cAChB,oDAEF,0BAAMA,UAAU,YACd,yBAAKA,UAAU,aACb,6BAASA,UAAU,eACjB,oCACA,6BAASA,UAAU,SACjB,2BAAOC,KAAK,OAAOC,KAAK,UACxB,4BAAQF,UAAU,WAAWG,QAAS,kBArC5B,WACpB,IAAMC,EAAOC,SAASC,cAAc,qBAChCF,EAAKG,MAAQ,GACfnB,EAASgB,EAAKG,OACdjB,EAAgB,KAEhBkB,MAAM,2CAERJ,EAAKG,MAAQ,GA6ByCE,KAA5C,cAGJ,6BAAST,UAAU,eACjB,2CACCb,EAAQ,GACP,0CAAgBA,GAElB,wBAAIa,UAAU,gBACXX,EAAaM,OACZJ,EAAqBmB,KAAI,SAACC,EAAOC,GAAR,OACvB,wBAAIC,IAAKD,GAAT,UAAoBD,EAApB,cAA+BtB,EAAauB,GAASvB,EAAauB,GAAS,OACzE,OAMd,4BAAQZ,UAAU,cAChB,4DCrDYc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASf,SAASgB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2fa8bcb8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [money, setMoney] = useState(0);\n  const [denomination, setDenomination] = useState([]);\n  const defaultDenominations = [2000, 500, 200, 100, 50, 20, 10, 5, 2, 1];\n\n  // Set the value of money in state\n  const withdrawMoney = () => {\n    const elem = document.querySelector('input[name=money]');\n    if (elem.value > 0) {\n      setMoney(elem.value);\n      setDenomination([]);\n    } else {\n      alert('Money enter a valid amount to withdraw.')\n    }\n    elem.value = '';\n  }\n\n  // Calculate the notes as per the amount\n  useEffect(() => {\n    let result = [];\n    let total = money;\n    if (money > 0 && denomination.length === 0) {\n      for (let i = 0; i < defaultDenominations.length; i++) {\n        if (total > 0) {\n          result.push(Math.floor(total / defaultDenominations[i])); // 5000/2000 = 1\n          total = total % defaultDenominations[i]; //5000 % 2 = 500\n        }\n      }\n      setDenomination(result);\n    }\n  }, [defaultDenominations, denomination.length, money]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>ATM Money Dispensor</h1>\n      </header>\n      <main className=\"App-main\">\n        <div className=\"container\">\n          <section className=\"App-section\">\n            <p>MONEY</p>\n            <section className=\"money\">\n              <input type=\"text\" name=\"money\"></input>\n              <button className=\"withdraw\" onClick={() => withdrawMoney()}>Withdraw</button>\n            </section>\n          </section>\n          <section className=\"App-section\">\n            <p>DENOMINATION</p>\n            {money > 0 &&\n              <p>Withdrawn : {money}</p>\n            }\n            <ul className=\"denomination\">\n              {denomination.length ?\n                defaultDenominations.map((notes, index) =>\n                  <li key={index}>{`${notes} * ${denomination[index] ? denomination[index] : 0}`}</li>\n                ) : ''\n              }\n            </ul>\n          </section>\n        </div>\n      </main>\n      <footer className=\"App-footer\">\n        <p>Developed by : Aafaq Ahmad</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}